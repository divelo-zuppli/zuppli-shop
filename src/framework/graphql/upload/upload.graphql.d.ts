/* 768485e33b422c520af61ff80e5b6e1374261e08
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type UploadMutationVariables = Types.Exact<{
  attachment: Array<Types.Scalars['Upload']> | Types.Scalars['Upload'];
}>;
export declare type UploadMutation = {
  __typename?: 'Mutation';
  upload: Array<{
    __typename?: 'Attachment';
    original?: string | null | undefined;
    thumbnail?: string | null | undefined;
    id?: string | null | undefined;
  }>;
};
export declare const UploadDocument: Apollo.DocumentNode;
export declare type UploadMutationFn = Apollo.MutationFunction<UploadMutation, UploadMutationVariables>;
/**
 * __useUploadMutation__
 *
 * To run a mutation, you first call `useUploadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadMutation, { data, loading, error }] = useUploadMutation({
 *   variables: {
 *      attachment: // value for 'attachment'
 *   },
 * });
 */

export declare function useUploadMutation(baseOptions?: Apollo.MutationHookOptions<UploadMutation, UploadMutationVariables>): Apollo.MutationTuple<UploadMutation, Types.Exact<{
  attachment: any;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type UploadMutationHookResult = ReturnType<typeof useUploadMutation>;
export declare type UploadMutationResult = Apollo.MutationResult<UploadMutation>;
export declare type UploadMutationOptions = Apollo.BaseMutationOptions<UploadMutation, UploadMutationVariables>;