/* 8ffb8a2ea95b6b2a9d0a10c3b577a67e26ad4866
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type RefundsQueryVariables = Types.Exact<{
  orderBy?: Types.Maybe<Types.Scalars['String']>;
  sortedBy?: Types.Maybe<Types.Scalars['String']>;
  shop_id?: Types.Maybe<Types.Scalars['Int']>;
  order_id?: Types.Maybe<Types.Scalars['Int']>;
  customer_id?: Types.Maybe<Types.Scalars['Int']>;
  first?: Types.Maybe<Types.Scalars['Int']>;
  page?: Types.Maybe<Types.Scalars['Int']>;
}>;
export declare type RefundsQuery = {
  __typename?: 'Query';
  refunds: {
    __typename?: 'RefundPaginator';
    data: Array<{
      __typename?: 'Refund';
      id: string;
      title: string;
      amount: string;
      status?: Types.RefundStatus | null | undefined;
      created_at: any;
      updated_at: any;
      order?: {
        __typename?: 'Order';
        tracking_number: string;
      } | null | undefined;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare type CreateRefundMutationVariables = Types.Exact<{
  input: Types.CreateRefundInput;
}>;
export declare type CreateRefundMutation = {
  __typename?: 'Mutation';
  createRefund: {
    __typename?: 'Refund';
    id: string;
    title: string;
    description: string;
    images?: Array<{
      __typename?: 'Attachment';
      thumbnail?: string | null | undefined;
      original?: string | null | undefined;
      id?: string | null | undefined;
    }> | null | undefined;
  };
};
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const RefundsDocument: Apollo.DocumentNode;
/**
 * __useRefundsQuery__
 *
 * To run a query within a React component, call `useRefundsQuery` and pass it any options that fit your needs.
 * When your component renders, `useRefundsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRefundsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      sortedBy: // value for 'sortedBy'
 *      shop_id: // value for 'shop_id'
 *      order_id: // value for 'order_id'
 *      customer_id: // value for 'customer_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useRefundsQuery(baseOptions?: Apollo.QueryHookOptions<RefundsQuery, RefundsQueryVariables>): Apollo.QueryResult<RefundsQuery, Types.Exact<{
  orderBy?: Types.Maybe<string> | undefined;
  sortedBy?: Types.Maybe<string> | undefined;
  shop_id?: Types.Maybe<number> | undefined;
  order_id?: Types.Maybe<number> | undefined;
  customer_id?: Types.Maybe<number> | undefined;
  first?: Types.Maybe<number> | undefined;
  page?: Types.Maybe<number> | undefined;
}>>;
export declare function useRefundsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RefundsQuery, RefundsQueryVariables>): Apollo.QueryTuple<RefundsQuery, Types.Exact<{
  orderBy?: Types.Maybe<string> | undefined;
  sortedBy?: Types.Maybe<string> | undefined;
  shop_id?: Types.Maybe<number> | undefined;
  order_id?: Types.Maybe<number> | undefined;
  customer_id?: Types.Maybe<number> | undefined;
  first?: Types.Maybe<number> | undefined;
  page?: Types.Maybe<number> | undefined;
}>>;
export declare type RefundsQueryHookResult = ReturnType<typeof useRefundsQuery>;
export declare type RefundsLazyQueryHookResult = ReturnType<typeof useRefundsLazyQuery>;
export declare type RefundsQueryResult = Apollo.QueryResult<RefundsQuery, RefundsQueryVariables>;
export declare const CreateRefundDocument: Apollo.DocumentNode;
export declare type CreateRefundMutationFn = Apollo.MutationFunction<CreateRefundMutation, CreateRefundMutationVariables>;
/**
 * __useCreateRefundMutation__
 *
 * To run a mutation, you first call `useCreateRefundMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRefundMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRefundMutation, { data, loading, error }] = useCreateRefundMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useCreateRefundMutation(baseOptions?: Apollo.MutationHookOptions<CreateRefundMutation, CreateRefundMutationVariables>): Apollo.MutationTuple<CreateRefundMutation, Types.Exact<{
  input: Types.CreateRefundInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type CreateRefundMutationHookResult = ReturnType<typeof useCreateRefundMutation>;
export declare type CreateRefundMutationResult = Apollo.MutationResult<CreateRefundMutation>;
export declare type CreateRefundMutationOptions = Apollo.BaseMutationOptions<CreateRefundMutation, CreateRefundMutationVariables>;