/* 300fe3f085bc6ee74e46f0dd5e243480ecc35ac3
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type CouponQueryVariables = Types.Exact<{
  id?: Types.Maybe<Types.Scalars['ID']>;
  code?: Types.Maybe<Types.Scalars['String']>;
}>;
export declare type CouponQuery = {
  __typename?: 'Query';
  coupon: {
    __typename?: 'Coupon';
    id: string;
    code: string;
    type: Types.CouponType;
    amount: number;
    is_valid: boolean;
  };
};
export declare type VerifyCouponMutationVariables = Types.Exact<{
  code: Types.Scalars['String'];
}>;
export declare type VerifyCouponMutation = {
  __typename?: 'Mutation';
  verifyCoupon: {
    __typename?: 'VerifyCouponResponse';
    is_valid: boolean;
    coupon: {
      __typename?: 'Coupon';
      id: string;
      code: string;
      type: Types.CouponType;
      amount: number;
      is_valid: boolean;
    };
  };
};
export declare type CouponsQueryVariables = Types.Exact<{
  first: Types.Scalars['Int'];
  page?: Types.Maybe<Types.Scalars['Int']>;
}>;
export declare type CouponsQuery = {
  __typename?: 'Query';
  coupons: {
    __typename?: 'CouponPaginator';
    data: Array<{
      __typename?: 'Coupon';
      id: string;
      code: string;
      description?: string | null | undefined;
      type: Types.CouponType;
      amount: number;
      active_from: string;
      expire_at: string;
      created_at: any;
      updated_at: any;
      is_valid: boolean;
      image?: {
        __typename?: 'Attachment';
        id?: string | null | undefined;
        original?: string | null | undefined;
        thumbnail?: string | null | undefined;
      } | null | undefined;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const CouponDocument: Apollo.DocumentNode;
/**
 * __useCouponQuery__
 *
 * To run a query within a React component, call `useCouponQuery` and pass it any options that fit your needs.
 * When your component renders, `useCouponQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCouponQuery({
 *   variables: {
 *      id: // value for 'id'
 *      code: // value for 'code'
 *   },
 * });
 */

export declare function useCouponQuery(baseOptions?: Apollo.QueryHookOptions<CouponQuery, CouponQueryVariables>): Apollo.QueryResult<CouponQuery, Types.Exact<{
  id?: Types.Maybe<string> | undefined;
  code?: Types.Maybe<string> | undefined;
}>>;
export declare function useCouponLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CouponQuery, CouponQueryVariables>): Apollo.QueryTuple<CouponQuery, Types.Exact<{
  id?: Types.Maybe<string> | undefined;
  code?: Types.Maybe<string> | undefined;
}>>;
export declare type CouponQueryHookResult = ReturnType<typeof useCouponQuery>;
export declare type CouponLazyQueryHookResult = ReturnType<typeof useCouponLazyQuery>;
export declare type CouponQueryResult = Apollo.QueryResult<CouponQuery, CouponQueryVariables>;
export declare const VerifyCouponDocument: Apollo.DocumentNode;
export declare type VerifyCouponMutationFn = Apollo.MutationFunction<VerifyCouponMutation, VerifyCouponMutationVariables>;
/**
 * __useVerifyCouponMutation__
 *
 * To run a mutation, you first call `useVerifyCouponMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyCouponMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyCouponMutation, { data, loading, error }] = useVerifyCouponMutation({
 *   variables: {
 *      code: // value for 'code'
 *   },
 * });
 */

export declare function useVerifyCouponMutation(baseOptions?: Apollo.MutationHookOptions<VerifyCouponMutation, VerifyCouponMutationVariables>): Apollo.MutationTuple<VerifyCouponMutation, Types.Exact<{
  code: string;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type VerifyCouponMutationHookResult = ReturnType<typeof useVerifyCouponMutation>;
export declare type VerifyCouponMutationResult = Apollo.MutationResult<VerifyCouponMutation>;
export declare type VerifyCouponMutationOptions = Apollo.BaseMutationOptions<VerifyCouponMutation, VerifyCouponMutationVariables>;
export declare const CouponsDocument: Apollo.DocumentNode;
/**
 * __useCouponsQuery__
 *
 * To run a query within a React component, call `useCouponsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCouponsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */

export declare function useCouponsQuery(baseOptions: Apollo.QueryHookOptions<CouponsQuery, CouponsQueryVariables>): Apollo.QueryResult<CouponsQuery, Types.Exact<{
  first: number;
  page?: Types.Maybe<number> | undefined;
}>>;
export declare function useCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CouponsQuery, CouponsQueryVariables>): Apollo.QueryTuple<CouponsQuery, Types.Exact<{
  first: number;
  page?: Types.Maybe<number> | undefined;
}>>;
export declare type CouponsQueryHookResult = ReturnType<typeof useCouponsQuery>;
export declare type CouponsLazyQueryHookResult = ReturnType<typeof useCouponsLazyQuery>;
export declare type CouponsQueryResult = Apollo.QueryResult<CouponsQuery, CouponsQueryVariables>;