/* 777ef1ace573198bbeeda5bc2408122619be9645
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type ShopPartsFragment = {
  __typename?: 'Shop';
  id: string;
  name: string;
  slug: string;
  owner_id: number;
  description?: string | null | undefined;
  orders_count: number;
  products_count: number;
  is_active: boolean;
  created_at: any;
  owner: {
    __typename?: 'User';
    name: string;
    email: string;
    profile?: {
      __typename?: 'Profile';
      contact?: string | null | undefined;
    } | null | undefined;
  };
  staffs?: Array<{
    __typename?: 'User';
    name: string;
    email: string;
  }> | null | undefined;
  logo?: {
    __typename?: 'Attachment';
    id?: string | null | undefined;
    thumbnail?: string | null | undefined;
    original?: string | null | undefined;
  } | null | undefined;
  cover_image?: {
    __typename?: 'Attachment';
    id?: string | null | undefined;
    thumbnail?: string | null | undefined;
    original?: string | null | undefined;
  } | null | undefined;
  balance?: {
    __typename?: 'Balance';
    admin_commission_rate: number;
    total_earnings: number;
    withdrawn_amount: number;
    current_balance: number;
    payment_info: {
      __typename?: 'PaymentInfo';
      account?: string | null | undefined;
      name?: string | null | undefined;
      bank?: string | null | undefined;
      email?: string | null | undefined;
    };
  } | null | undefined;
  address: {
    __typename?: 'UserAddress';
    street_address: string;
    country: string;
    city: string;
    state: string;
    zip: string;
  };
};
export declare type ShopsQueryVariables = Types.Exact<{
  text?: Types.Maybe<Types.Scalars['String']>;
  orderBy?: Types.Maybe<Types.Scalars['String']>;
  sortedBy?: Types.Maybe<Types.Scalars['String']>;
  first?: Types.Maybe<Types.Scalars['Int']>;
  page?: Types.Maybe<Types.Scalars['Int']>;
  is_active?: Types.Maybe<Types.Scalars['Boolean']>;
}>;
export declare type ShopsQuery = {
  __typename?: 'Query';
  shops: {
    __typename?: 'ShopPaginator';
    data: Array<{
      __typename?: 'Shop';
      id: string;
      name: string;
      slug: string;
      owner_id: number;
      description?: string | null | undefined;
      orders_count: number;
      products_count: number;
      is_active: boolean;
      created_at: any;
      owner: {
        __typename?: 'User';
        name: string;
        email: string;
        profile?: {
          __typename?: 'Profile';
          contact?: string | null | undefined;
        } | null | undefined;
      };
      staffs?: Array<{
        __typename?: 'User';
        name: string;
        email: string;
      }> | null | undefined;
      logo?: {
        __typename?: 'Attachment';
        id?: string | null | undefined;
        thumbnail?: string | null | undefined;
        original?: string | null | undefined;
      } | null | undefined;
      cover_image?: {
        __typename?: 'Attachment';
        id?: string | null | undefined;
        thumbnail?: string | null | undefined;
        original?: string | null | undefined;
      } | null | undefined;
      balance?: {
        __typename?: 'Balance';
        admin_commission_rate: number;
        total_earnings: number;
        withdrawn_amount: number;
        current_balance: number;
        payment_info: {
          __typename?: 'PaymentInfo';
          account?: string | null | undefined;
          name?: string | null | undefined;
          bank?: string | null | undefined;
          email?: string | null | undefined;
        };
      } | null | undefined;
      address: {
        __typename?: 'UserAddress';
        street_address: string;
        country: string;
        city: string;
        state: string;
        zip: string;
      };
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare type ShopQueryVariables = Types.Exact<{
  id?: Types.Maybe<Types.Scalars['ID']>;
  slug?: Types.Maybe<Types.Scalars['String']>;
}>;
export declare type ShopQuery = {
  __typename?: 'Query';
  shop?: {
    __typename?: 'Shop';
    id: string;
    name: string;
    slug: string;
    owner_id: number;
    description?: string | null | undefined;
    orders_count: number;
    products_count: number;
    is_active: boolean;
    created_at: any;
    settings?: {
      __typename?: 'ShopSettings';
      website?: string | null | undefined;
      contact?: string | null | undefined;
      socials?: Array<{
        __typename?: 'ShopSocials';
        icon: string;
        url: string;
      }> | null | undefined;
      location?: {
        __typename?: 'Location';
        lat?: number | null | undefined;
        lng?: number | null | undefined;
        formattedAddress?: string | null | undefined;
        city?: string | null | undefined;
        state?: string | null | undefined;
        country?: string | null | undefined;
        zip?: string | null | undefined;
      } | null | undefined;
    } | null | undefined;
    owner: {
      __typename?: 'User';
      name: string;
      email: string;
      profile?: {
        __typename?: 'Profile';
        contact?: string | null | undefined;
      } | null | undefined;
    };
    staffs?: Array<{
      __typename?: 'User';
      name: string;
      email: string;
    }> | null | undefined;
    logo?: {
      __typename?: 'Attachment';
      id?: string | null | undefined;
      thumbnail?: string | null | undefined;
      original?: string | null | undefined;
    } | null | undefined;
    cover_image?: {
      __typename?: 'Attachment';
      id?: string | null | undefined;
      thumbnail?: string | null | undefined;
      original?: string | null | undefined;
    } | null | undefined;
    balance?: {
      __typename?: 'Balance';
      admin_commission_rate: number;
      total_earnings: number;
      withdrawn_amount: number;
      current_balance: number;
      payment_info: {
        __typename?: 'PaymentInfo';
        account?: string | null | undefined;
        name?: string | null | undefined;
        bank?: string | null | undefined;
        email?: string | null | undefined;
      };
    } | null | undefined;
    address: {
      __typename?: 'UserAddress';
      street_address: string;
      country: string;
      city: string;
      state: string;
      zip: string;
    };
  } | null | undefined;
};
export declare const ShopPartsFragmentDoc: Apollo.DocumentNode;
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const ShopsDocument: Apollo.DocumentNode;
/**
 * __useShopsQuery__
 *
 * To run a query within a React component, call `useShopsQuery` and pass it any options that fit your needs.
 * When your component renders, `useShopsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useShopsQuery({
 *   variables: {
 *      text: // value for 'text'
 *      orderBy: // value for 'orderBy'
 *      sortedBy: // value for 'sortedBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      is_active: // value for 'is_active'
 *   },
 * });
 */

export declare function useShopsQuery(baseOptions?: Apollo.QueryHookOptions<ShopsQuery, ShopsQueryVariables>): Apollo.QueryResult<ShopsQuery, Types.Exact<{
  text?: Types.Maybe<string> | undefined;
  orderBy?: Types.Maybe<string> | undefined;
  sortedBy?: Types.Maybe<string> | undefined;
  first?: Types.Maybe<number> | undefined;
  page?: Types.Maybe<number> | undefined;
  is_active?: Types.Maybe<boolean> | undefined;
}>>;
export declare function useShopsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ShopsQuery, ShopsQueryVariables>): Apollo.QueryTuple<ShopsQuery, Types.Exact<{
  text?: Types.Maybe<string> | undefined;
  orderBy?: Types.Maybe<string> | undefined;
  sortedBy?: Types.Maybe<string> | undefined;
  first?: Types.Maybe<number> | undefined;
  page?: Types.Maybe<number> | undefined;
  is_active?: Types.Maybe<boolean> | undefined;
}>>;
export declare type ShopsQueryHookResult = ReturnType<typeof useShopsQuery>;
export declare type ShopsLazyQueryHookResult = ReturnType<typeof useShopsLazyQuery>;
export declare type ShopsQueryResult = Apollo.QueryResult<ShopsQuery, ShopsQueryVariables>;
export declare const ShopDocument: Apollo.DocumentNode;
/**
 * __useShopQuery__
 *
 * To run a query within a React component, call `useShopQuery` and pass it any options that fit your needs.
 * When your component renders, `useShopQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useShopQuery({
 *   variables: {
 *      id: // value for 'id'
 *      slug: // value for 'slug'
 *   },
 * });
 */

export declare function useShopQuery(baseOptions?: Apollo.QueryHookOptions<ShopQuery, ShopQueryVariables>): Apollo.QueryResult<ShopQuery, Types.Exact<{
  id?: Types.Maybe<string> | undefined;
  slug?: Types.Maybe<string> | undefined;
}>>;
export declare function useShopLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ShopQuery, ShopQueryVariables>): Apollo.QueryTuple<ShopQuery, Types.Exact<{
  id?: Types.Maybe<string> | undefined;
  slug?: Types.Maybe<string> | undefined;
}>>;
export declare type ShopQueryHookResult = ReturnType<typeof useShopQuery>;
export declare type ShopLazyQueryHookResult = ReturnType<typeof useShopLazyQuery>;
export declare type ShopQueryResult = Apollo.QueryResult<ShopQuery, ShopQueryVariables>;