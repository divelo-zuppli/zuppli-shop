/* 3516f6672615de658ccd8fb0107ec2e925035a21
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type ProductsQueryVariables = Types.Exact<{
  orderBy?: Types.Maybe<Array<Types.QueryProductsOrderByOrderByClause> | Types.QueryProductsOrderByOrderByClause>;
  text?: Types.Maybe<Types.Scalars['String']>;
  status?: Types.Maybe<Types.Scalars['String']>;
  hasType?: Types.Maybe<Types.QueryProductsHasTypeWhereHasConditions>;
  hasCategories?: Types.Maybe<Types.QueryProductsHasCategoriesWhereHasConditions>;
  first?: Types.Maybe<Types.Scalars['Int']>;
  page?: Types.Maybe<Types.Scalars['Int']>;
  shop_id?: Types.Maybe<Types.Scalars['ID']>;
}>;
export declare type ProductsQuery = {
  __typename?: 'Query';
  products: {
    __typename?: 'ProductPaginator';
    data: Array<{
      __typename?: 'Product';
      id: string;
      name: string;
      slug: string;
      product_type: Types.ProductType;
      price?: number | null | undefined;
      sale_price?: number | null | undefined;
      min_price?: number | null | undefined;
      max_price?: number | null | undefined;
      quantity: number;
      unit: string;
      type: {
        __typename?: 'Type';
        id: string;
        name: string;
        slug: string;
        settings?: {
          __typename?: 'TypeSettings';
          productCard: string;
        } | null | undefined;
      };
      image?: {
        __typename?: 'Attachment';
        id?: string | null | undefined;
        thumbnail?: string | null | undefined;
        original?: string | null | undefined;
      } | null | undefined;
    }>;
    paginatorInfo: {
      __typename?: 'PaginatorInfo';
      count: number;
      currentPage: number;
      firstItem: number;
      hasMorePages: boolean;
      lastItem: number;
      lastPage: number;
      perPage: number;
      total: number;
    };
  };
};
export declare type ProductPartsFragment = {
  __typename?: 'Product';
  id: string;
  name: string;
  slug: string;
  product_type: Types.ProductType;
  price?: number | null | undefined;
  sale_price?: number | null | undefined;
  min_price?: number | null | undefined;
  max_price?: number | null | undefined;
  quantity: number;
  unit: string;
  type: {
    __typename?: 'Type';
    id: string;
    name: string;
    slug: string;
    settings?: {
      __typename?: 'TypeSettings';
      productCard: string;
    } | null | undefined;
  };
  image?: {
    __typename?: 'Attachment';
    id?: string | null | undefined;
    thumbnail?: string | null | undefined;
    original?: string | null | undefined;
  } | null | undefined;
};
export declare type PaginatorPartsFragment = {
  __typename?: 'PaginatorInfo';
  count: number;
  currentPage: number;
  firstItem: number;
  hasMorePages: boolean;
  lastItem: number;
  lastPage: number;
  perPage: number;
  total: number;
};
export declare type ProductQueryVariables = Types.Exact<{
  id?: Types.Maybe<Types.Scalars['ID']>;
  slug?: Types.Maybe<Types.Scalars['String']>;
}>;
export declare type ProductQuery = {
  __typename?: 'Query';
  product: {
    __typename?: 'Product';
    shop_id: number;
    description: string;
    id: string;
    name: string;
    slug: string;
    product_type: Types.ProductType;
    price?: number | null | undefined;
    sale_price?: number | null | undefined;
    min_price?: number | null | undefined;
    max_price?: number | null | undefined;
    quantity: number;
    unit: string;
    shop: {
      __typename?: 'Shop';
      name: string;
      slug: string;
    };
    categories: Array<{
      __typename?: 'Category';
      id: string;
      name: string;
      slug: string;
      children?: Array<{
        __typename?: 'Category';
        id: string;
        name: string;
        slug: string;
      }> | null | undefined;
    }>;
    gallery?: Array<{
      __typename?: 'Attachment';
      id?: string | null | undefined;
      thumbnail?: string | null | undefined;
      original?: string | null | undefined;
    }> | null | undefined;
    variations?: Array<{
      __typename?: 'AttributeValue';
      id: string;
      value: string;
      meta?: string | null | undefined;
      attribute: {
        __typename?: 'Attribute';
        id: string;
        name: string;
        slug: string;
      };
    }> | null | undefined;
    variation_options?: Array<{
      __typename?: 'Variation';
      id: string;
      title: string;
      price: number;
      sale_price?: number | null | undefined;
      quantity: number;
      is_disable: boolean;
      options: Array<{
        __typename?: 'VariationOption';
        name: string;
        value: string;
      }>;
    }> | null | undefined;
    related_products?: Array<{
      __typename?: 'Product';
      id: string;
      name: string;
      slug: string;
      product_type: Types.ProductType;
      price?: number | null | undefined;
      sale_price?: number | null | undefined;
      min_price?: number | null | undefined;
      max_price?: number | null | undefined;
      quantity: number;
      unit: string;
      type: {
        __typename?: 'Type';
        id: string;
        name: string;
        slug: string;
        settings?: {
          __typename?: 'TypeSettings';
          productCard: string;
        } | null | undefined;
      };
      image?: {
        __typename?: 'Attachment';
        id?: string | null | undefined;
        thumbnail?: string | null | undefined;
        original?: string | null | undefined;
      } | null | undefined;
    }> | null | undefined;
    type: {
      __typename?: 'Type';
      id: string;
      name: string;
      slug: string;
      settings?: {
        __typename?: 'TypeSettings';
        productCard: string;
      } | null | undefined;
    };
    image?: {
      __typename?: 'Attachment';
      id?: string | null | undefined;
      thumbnail?: string | null | undefined;
      original?: string | null | undefined;
    } | null | undefined;
  };
};
export declare const ProductPartsFragmentDoc: Apollo.DocumentNode;
export declare const PaginatorPartsFragmentDoc: Apollo.DocumentNode;
export declare const ProductsDocument: Apollo.DocumentNode;
/**
 * __useProductsQuery__
 *
 * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProductsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      text: // value for 'text'
 *      status: // value for 'status'
 *      hasType: // value for 'hasType'
 *      hasCategories: // value for 'hasCategories'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      shop_id: // value for 'shop_id'
 *   },
 * });
 */

export declare function useProductsQuery(baseOptions?: Apollo.QueryHookOptions<ProductsQuery, ProductsQueryVariables>): Apollo.QueryResult<ProductsQuery, Types.Exact<{
  orderBy?: Types.Maybe<Types.QueryProductsOrderByOrderByClause | Types.QueryProductsOrderByOrderByClause[]> | undefined;
  text?: Types.Maybe<string> | undefined;
  status?: Types.Maybe<string> | undefined;
  hasType?: Types.Maybe<Types.QueryProductsHasTypeWhereHasConditions> | undefined;
  hasCategories?: Types.Maybe<Types.QueryProductsHasCategoriesWhereHasConditions> | undefined;
  first?: Types.Maybe<number> | undefined;
  page?: Types.Maybe<number> | undefined;
  shop_id?: Types.Maybe<string> | undefined;
}>>;
export declare function useProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>): Apollo.QueryTuple<ProductsQuery, Types.Exact<{
  orderBy?: Types.Maybe<Types.QueryProductsOrderByOrderByClause | Types.QueryProductsOrderByOrderByClause[]> | undefined;
  text?: Types.Maybe<string> | undefined;
  status?: Types.Maybe<string> | undefined;
  hasType?: Types.Maybe<Types.QueryProductsHasTypeWhereHasConditions> | undefined;
  hasCategories?: Types.Maybe<Types.QueryProductsHasCategoriesWhereHasConditions> | undefined;
  first?: Types.Maybe<number> | undefined;
  page?: Types.Maybe<number> | undefined;
  shop_id?: Types.Maybe<string> | undefined;
}>>;
export declare type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;
export declare type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;
export declare type ProductsQueryResult = Apollo.QueryResult<ProductsQuery, ProductsQueryVariables>;
export declare const ProductDocument: Apollo.DocumentNode;
/**
 * __useProductQuery__
 *
 * To run a query within a React component, call `useProductQuery` and pass it any options that fit your needs.
 * When your component renders, `useProductQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProductQuery({
 *   variables: {
 *      id: // value for 'id'
 *      slug: // value for 'slug'
 *   },
 * });
 */

export declare function useProductQuery(baseOptions?: Apollo.QueryHookOptions<ProductQuery, ProductQueryVariables>): Apollo.QueryResult<ProductQuery, Types.Exact<{
  id?: Types.Maybe<string> | undefined;
  slug?: Types.Maybe<string> | undefined;
}>>;
export declare function useProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProductQuery, ProductQueryVariables>): Apollo.QueryTuple<ProductQuery, Types.Exact<{
  id?: Types.Maybe<string> | undefined;
  slug?: Types.Maybe<string> | undefined;
}>>;
export declare type ProductQueryHookResult = ReturnType<typeof useProductQuery>;
export declare type ProductLazyQueryHookResult = ReturnType<typeof useProductLazyQuery>;
export declare type ProductQueryResult = Apollo.QueryResult<ProductQuery, ProductQueryVariables>;