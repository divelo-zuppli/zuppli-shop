/* 02d5110b9cf529e84609a700af4ae2a9ed0ffb7c
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type SettingsQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type SettingsQuery = {
  __typename?: 'Query';
  settings: {
    __typename?: 'Setting';
    id: string;
    options: {
      __typename?: 'SettingsOptions';
      siteTitle: string;
      siteSubtitle: string;
      currency: string;
      taxClass: string;
      shippingClass: string;
      deliveryTime: Array<{
        __typename?: 'DeliveryTime';
        title: string;
        description: string;
      }>;
      contactDetails: {
        __typename?: 'ContactDetails';
        contact: string;
        website: string;
        socials: Array<{
          __typename?: 'ShopSocials';
          icon: string;
          url: string;
        }>;
        location: {
          __typename?: 'Location';
          lat?: number | null | undefined;
          lng?: number | null | undefined;
          city?: string | null | undefined;
          state?: string | null | undefined;
          country?: string | null | undefined;
          zip?: string | null | undefined;
          formattedAddress?: string | null | undefined;
        };
      };
      seo: {
        __typename?: 'SeoSettings';
        metaTitle?: string | null | undefined;
        metaDescription?: string | null | undefined;
        ogTitle?: string | null | undefined;
        ogDescription?: string | null | undefined;
        twitterHandle?: string | null | undefined;
        twitterCardType?: string | null | undefined;
        metaTags?: string | null | undefined;
        canonicalUrl?: string | null | undefined;
      };
      google?: {
        __typename?: 'GoogleSettings';
        isEnable: boolean;
        tagManagerId: string;
      } | null | undefined;
      facebook?: {
        __typename?: 'FacebookSettings';
        isEnable: boolean;
        appId: string;
        pageId: string;
      } | null | undefined;
    };
  };
};
export declare const SettingsDocument: Apollo.DocumentNode;
/**
 * __useSettingsQuery__
 *
 * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useSettingsQuery(baseOptions?: Apollo.QueryHookOptions<SettingsQuery, SettingsQueryVariables>): Apollo.QueryResult<SettingsQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SettingsQuery, SettingsQueryVariables>): Apollo.QueryTuple<SettingsQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type SettingsQueryHookResult = ReturnType<typeof useSettingsQuery>;
export declare type SettingsLazyQueryHookResult = ReturnType<typeof useSettingsLazyQuery>;
export declare type SettingsQueryResult = Apollo.QueryResult<SettingsQuery, SettingsQueryVariables>;