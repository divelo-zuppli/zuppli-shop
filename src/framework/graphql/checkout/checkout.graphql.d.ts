/* 0417abb7ee6f60d44267321823c1551e8465f9af
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type VerifyCheckoutMutationVariables = Types.Exact<{
  amount: Types.Scalars['Float'];
  products: Array<Types.ConnectProductOrderPivot> | Types.ConnectProductOrderPivot;
  billing_address?: Types.Maybe<Types.UserAddressInput>;
  shipping_address?: Types.Maybe<Types.UserAddressInput>;
}>;
export declare type VerifyCheckoutMutation = {
  __typename?: 'Mutation';
  verifyCheckout: {
    __typename?: 'VerifiedCheckoutData';
    total_tax: number;
    shipping_charge: number;
    unavailable_products: Array<string>;
    wallet_amount: number;
    wallet_currency: number;
  };
};
export declare const VerifyCheckoutDocument: Apollo.DocumentNode;
export declare type VerifyCheckoutMutationFn = Apollo.MutationFunction<VerifyCheckoutMutation, VerifyCheckoutMutationVariables>;
/**
 * __useVerifyCheckoutMutation__
 *
 * To run a mutation, you first call `useVerifyCheckoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyCheckoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyCheckoutMutation, { data, loading, error }] = useVerifyCheckoutMutation({
 *   variables: {
 *      amount: // value for 'amount'
 *      products: // value for 'products'
 *      billing_address: // value for 'billing_address'
 *      shipping_address: // value for 'shipping_address'
 *   },
 * });
 */

export declare function useVerifyCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<VerifyCheckoutMutation, VerifyCheckoutMutationVariables>): Apollo.MutationTuple<VerifyCheckoutMutation, Types.Exact<{
  amount: number;
  products: Types.ConnectProductOrderPivot | Types.ConnectProductOrderPivot[];
  billing_address?: Types.Maybe<Types.UserAddressInput> | undefined;
  shipping_address?: Types.Maybe<Types.UserAddressInput> | undefined;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type VerifyCheckoutMutationHookResult = ReturnType<typeof useVerifyCheckoutMutation>;
export declare type VerifyCheckoutMutationResult = Apollo.MutationResult<VerifyCheckoutMutation>;
export declare type VerifyCheckoutMutationOptions = Apollo.BaseMutationOptions<VerifyCheckoutMutation, VerifyCheckoutMutationVariables>;