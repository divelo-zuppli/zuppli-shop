/* 361ec6aa9ea39da0ad5eebfc6b48c0ee98b6fa70
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type CategoryPartsFragment = {
  __typename?: 'Category';
  id: number;
  name: string;
  slug: string;
  parent?: {
    __typename?: 'Category';
    id: number;
    name: string;
    slug: string;
  } | null | undefined;
  attatchments?: Array<{
    __typename?: 'Attachment';
    uid: string;
    type: string;
    url: string;
  }> | null | undefined;
};
export declare type CategoriesQueryVariables = Types.Exact<{
  limit?: Types.Maybe<Types.Scalars['Int']>;
  skip?: Types.Maybe<Types.Scalars['Int']>;
  q?: Types.Maybe<Types.Scalars['String']>;
}>;
export declare type CategoriesQuery = {
  __typename?: 'Query';
  getAllCategories?: Array<{
    __typename?: 'Category';
    id: number;
    name: string;
    slug: string;
    parent?: {
      __typename?: 'Category';
      id: number;
      name: string;
      slug: string;
    } | null | undefined;
    children?: Array<{
      __typename?: 'Category';
      id: number;
      name: string;
      slug: string;
      parent?: {
        __typename?: 'Category';
        id: number;
        name: string;
        slug: string;
      } | null | undefined;
      children?: Array<{
        __typename?: 'Category';
        id: number;
        name: string;
        slug: string;
        parent?: {
          __typename?: 'Category';
          id: number;
          name: string;
          slug: string;
        } | null | undefined;
      }> | null | undefined;
    }> | null | undefined;
  }> | null | undefined;
};
export declare const CategoryPartsFragmentDoc: Apollo.DocumentNode;
export declare const CategoriesDocument: Apollo.DocumentNode;
/**
 * __useCategoriesQuery__
 *
 * To run a query within a React component, call `useCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCategoriesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      skip: // value for 'skip'
 *      q: // value for 'q'
 *   },
 * });
 */

export declare function useCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<CategoriesQuery, CategoriesQueryVariables>): Apollo.QueryResult<CategoriesQuery, Types.Exact<{
  limit?: Types.Maybe<number> | undefined;
  skip?: Types.Maybe<number> | undefined;
  q?: Types.Maybe<string> | undefined;
}>>;
export declare function useCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoriesQuery, CategoriesQueryVariables>): Apollo.QueryTuple<CategoriesQuery, Types.Exact<{
  limit?: Types.Maybe<number> | undefined;
  skip?: Types.Maybe<number> | undefined;
  q?: Types.Maybe<string> | undefined;
}>>;
export declare type CategoriesQueryHookResult = ReturnType<typeof useCategoriesQuery>;
export declare type CategoriesLazyQueryHookResult = ReturnType<typeof useCategoriesLazyQuery>;
export declare type CategoriesQueryResult = Apollo.QueryResult<CategoriesQuery, CategoriesQueryVariables>;