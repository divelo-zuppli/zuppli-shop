/* 32faab485e0327f8d99503edf0e8a27ab2d17a94
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type ContactMutationVariables = Types.Exact<{
  input: Types.ContactInput;
}>;
export declare type ContactMutation = {
  __typename?: 'Mutation';
  contactUs: {
    __typename?: 'ContactResponse';
    message: string;
    success: boolean;
  };
};
export declare const ContactDocument: Apollo.DocumentNode;
export declare type ContactMutationFn = Apollo.MutationFunction<ContactMutation, ContactMutationVariables>;
/**
 * __useContactMutation__
 *
 * To run a mutation, you first call `useContactMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useContactMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [contactMutation, { data, loading, error }] = useContactMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */

export declare function useContactMutation(baseOptions?: Apollo.MutationHookOptions<ContactMutation, ContactMutationVariables>): Apollo.MutationTuple<ContactMutation, Types.Exact<{
  input: Types.ContactInput;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type ContactMutationHookResult = ReturnType<typeof useContactMutation>;
export declare type ContactMutationResult = Apollo.MutationResult<ContactMutation>;
export declare type ContactMutationOptions = Apollo.BaseMutationOptions<ContactMutation, ContactMutationVariables>;